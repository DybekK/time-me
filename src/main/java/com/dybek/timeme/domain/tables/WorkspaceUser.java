/*
 * This file is generated by jOOQ.
 */
package com.dybek.timeme.domain.tables;


import com.dybek.timeme.domain.DefaultSchema;
import com.dybek.timeme.domain.Keys;
import com.dybek.timeme.domain.tables.records.WorkspaceUserRecord;

import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class WorkspaceUser extends TableImpl<WorkspaceUserRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>workspace_user</code>
     */
    public static final WorkspaceUser WORKSPACE_USER = new WorkspaceUser();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WorkspaceUserRecord> getRecordType() {
        return WorkspaceUserRecord.class;
    }

    /**
     * The column <code>workspace_user.id</code>.
     */
    public final TableField<WorkspaceUserRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>workspace_user.nickname</code>.
     */
    public final TableField<WorkspaceUserRecord, String> NICKNAME = createField(DSL.name("nickname"), SQLDataType.VARCHAR(2147483647).nullable(false), this, "");

    /**
     * The column <code>workspace_user.roles</code>.
     */
    public final TableField<WorkspaceUserRecord, Object[]> ROLES = createField(DSL.name("roles"), SQLDataType.OTHER.getArrayDataType(), this, "");

    /**
     * The column <code>workspace_user.user_id</code>.
     */
    public final TableField<WorkspaceUserRecord, UUID> USER_ID = createField(DSL.name("user_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>workspace_user.workspace_id</code>.
     */
    public final TableField<WorkspaceUserRecord, UUID> WORKSPACE_ID = createField(DSL.name("workspace_id"), SQLDataType.UUID.nullable(false), this, "");

    private WorkspaceUser(Name alias, Table<WorkspaceUserRecord> aliased) {
        this(alias, aliased, null);
    }

    private WorkspaceUser(Name alias, Table<WorkspaceUserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>workspace_user</code> table reference
     */
    public WorkspaceUser(String alias) {
        this(DSL.name(alias), WORKSPACE_USER);
    }

    /**
     * Create an aliased <code>workspace_user</code> table reference
     */
    public WorkspaceUser(Name alias) {
        this(alias, WORKSPACE_USER);
    }

    /**
     * Create a <code>workspace_user</code> table reference
     */
    public WorkspaceUser() {
        this(DSL.name("workspace_user"), null);
    }

    public <O extends Record> WorkspaceUser(Table<O> child, ForeignKey<O, WorkspaceUserRecord> key) {
        super(child, key, WORKSPACE_USER);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<WorkspaceUserRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_2F;
    }

    @Override
    public List<UniqueKey<WorkspaceUserRecord>> getKeys() {
        return Arrays.<UniqueKey<WorkspaceUserRecord>>asList(Keys.CONSTRAINT_2F);
    }

    @Override
    public List<ForeignKey<WorkspaceUserRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<WorkspaceUserRecord, ?>>asList(Keys.CONSTRAINT_2);
    }

    private transient Workspace _workspace;

    public Workspace workspace() {
        if (_workspace == null)
            _workspace = new Workspace(this, Keys.CONSTRAINT_2);

        return _workspace;
    }

    @Override
    public WorkspaceUser as(String alias) {
        return new WorkspaceUser(DSL.name(alias), this);
    }

    @Override
    public WorkspaceUser as(Name alias) {
        return new WorkspaceUser(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public WorkspaceUser rename(String name) {
        return new WorkspaceUser(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public WorkspaceUser rename(Name name) {
        return new WorkspaceUser(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<UUID, String, Object[], UUID, UUID> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
