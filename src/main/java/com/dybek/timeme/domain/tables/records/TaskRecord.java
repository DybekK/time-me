/*
 * This file is generated by jOOQ.
 */
package com.dybek.timeme.domain.tables.records;


import com.dybek.timeme.domain.tables.Task;

import java.util.UUID;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TaskRecord extends UpdatableRecordImpl<TaskRecord> implements Record3<UUID, UUID, UUID> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>task.id</code>.
     */
    public void setId(UUID value) {
        set(0, value);
    }

    /**
     * Getter for <code>task.id</code>.
     */
    public UUID getId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>task.workspace_user_id</code>.
     */
    public void setWorkspaceUserId(UUID value) {
        set(1, value);
    }

    /**
     * Getter for <code>task.workspace_user_id</code>.
     */
    public UUID getWorkspaceUserId() {
        return (UUID) get(1);
    }

    /**
     * Setter for <code>task.workspace_id</code>.
     */
    public void setWorkspaceId(UUID value) {
        set(2, value);
    }

    /**
     * Getter for <code>task.workspace_id</code>.
     */
    public UUID getWorkspaceId() {
        return (UUID) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<UUID, UUID, UUID> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<UUID, UUID, UUID> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return Task.TASK.ID;
    }

    @Override
    public Field<UUID> field2() {
        return Task.TASK.WORKSPACE_USER_ID;
    }

    @Override
    public Field<UUID> field3() {
        return Task.TASK.WORKSPACE_ID;
    }

    @Override
    public UUID component1() {
        return getId();
    }

    @Override
    public UUID component2() {
        return getWorkspaceUserId();
    }

    @Override
    public UUID component3() {
        return getWorkspaceId();
    }

    @Override
    public UUID value1() {
        return getId();
    }

    @Override
    public UUID value2() {
        return getWorkspaceUserId();
    }

    @Override
    public UUID value3() {
        return getWorkspaceId();
    }

    @Override
    public TaskRecord value1(UUID value) {
        setId(value);
        return this;
    }

    @Override
    public TaskRecord value2(UUID value) {
        setWorkspaceUserId(value);
        return this;
    }

    @Override
    public TaskRecord value3(UUID value) {
        setWorkspaceId(value);
        return this;
    }

    @Override
    public TaskRecord values(UUID value1, UUID value2, UUID value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TaskRecord
     */
    public TaskRecord() {
        super(Task.TASK);
    }

    /**
     * Create a detached, initialised TaskRecord
     */
    public TaskRecord(UUID id, UUID workspaceUserId, UUID workspaceId) {
        super(Task.TASK);

        setId(id);
        setWorkspaceUserId(workspaceUserId);
        setWorkspaceId(workspaceId);
    }
}
